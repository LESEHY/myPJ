// member.js

$(() => {

    $(`input[type=text][class!=sh][class!=msh],
    input[type=password]`).blur(function () {

        // 모든 공백 제거
        // get rid of space -> 공백을 제거하라!
        const groSpace = (cv) => cv.replace(/\s/g, "");
        // 원형: (cv) => {return cv.replace(/\s/g,"");}
        // 정규식: 슬래쉬(/)사이에 표현, \s 스페이스문자
        // g는 모두 찾으라는 global(전역) 플래그문자임
        // -> 플래그문자 Flag String 즉, 표시하면 작동하는 문법

        // 1. 방금 블러가 발생한 요소의 id는?
        let cid = $(this).attr("id");
        // cid는 current id 즉, 현재아이디라는 뜻으로 작명!

        // 2. 블러가 발생한 요소의 입력값은?
        let cv;
        // cv는 current value 즉, 현재값이라는 뜻으로 작명!

        // 2-1.이름일때 앞뒤공백만 제거
        if (cid === "nt") cv = $(this).val().trim();
        // 2-2.기타경우엔 모든 공백제거
        else cv = groSpace($(this).val());
        // trim() 문자열 앞뒤공백제거 메서드


        // 제거된 공백문자로 입력창에 다시 출력하기
        $(this).val(cv);
        // val(값) -> 값넣기!

        console.log("블러발생!", cid, "/", cv);

        /**************************************** 
            3. 빈값 여부 체크하기
       ****************************************/
        if (cv === "") {
            // 메시지 출력
            $(this).siblings(".msg").text("필수입력!");
            // siblings(요소) - 다른형제요소 중 특정요소선택
            // siblings() - 아무값도 안쓰면 다른형제요소 모두선택

            // 불통과!
            pass = false;
        } /////////// if : 빈값체크 ///////////

        /****************************************************** 
            4. 아이디일 경우 유효성 검사하기
            - 검사기준: 영문자로 시작하는 6~20글자 영문자/숫자
        ******************************************************/
        else if (cid === "idtxt") {
            // console.log("검사결과:",vReg(cv,cid));

            if (!vReg(cv, cid)) {
                // 불통과시 if안으로 들어오기!
                // false일때 들어오려면 !(NOT)연산자로 결과 뒤집기함!
                // 메시지 띄우기
                $(this)
                    .siblings(".msg")
                    .text("영문(대소문자 구분 없음), 숫자로 4~13자리만 입력 가능합니다.")
                    .removeClass("on"); //빨간글자

                // 불통과!
                pass = false;
            } ///////// if : 불통과시 //////////
            else {
                // 검사결과가 통과시 /////
                // 메시지 띄우기
                $(this)
                    .siblings(".msg")
                    .text("사용가능한 아이디입니다")
                    .addClass("on"); //글자녹색
            } ////////// else : 통과시 ///////////
        } //////////// else if : 아이디검사 /////////////
        else if (cid === "pwtxt") {
            console.log("검사결과:", vReg(cv, cid));

            if (!vReg(cv, cid)) {
                // 불통과시 if안으로 들어오기!
                // false일때 들어오려면 !(NOT)연산자로 결과 뒤집기함!
                // 메시지 띄우기
                $(this)
                    .siblings(".msg")
                    .text("영문, 숫자 혼합하여 10~20자리 이내로 입력하세요.");

                // 불통과!
                pass = false;
            } ///////// if : 불통과시 //////////
            else {
                // 검사결과가 통과시 /////
                // 메시지 지우기
                $(this).siblings(".msg").text("사용가능한 비밀번호 입니다.").addClass("on");
            } ////////// else : 통과시 ///////////
        } //////////// else if : 비밀번호검사 /////////////

        /****************************************************** 
            6. 비밀번호확인일 경우 유효성 검사하기
            - 검사기준: 입력된 비밀번호와 일치여부
        ******************************************************/
        else if (cid === "pwctxt") {
            if (cv !== $("#pwtxt").val()) {
                // 메시지 띄우기
                $(this).siblings(".msg").text("비밀번호가 일치하지 않습니다!");

                // 불통과!
                pass = false;
            } ///////// if : 불통과시 //////////
            else {
                // 검사결과가 통과시 /////
                // 메시지 지우기
                $(this).siblings(".msg").text("일치합니다.").addClass("on");
            } ////////// else : 통과시 ///////////
        } //////////// else if : 비밀번호확인검사 /////////////


        /******************************************************** 
            7. 휴대폰 유효성 검사
        ********************************************************/
        else if (cid === "ph") {

            $("#ph").keyup(function () {
                let val = $("#ph").val().replace(/^(\d{2,3})(\d{3,4})(\d{4})$/, `$1-$2-$3;`);
            });


            if (!vReg(cv, cid)) {
                // 불통과시 if안으로 들어오기!
                // false일때 들어오려면 !(NOT)연산자로 결과 뒤집기함!
                // 메시지 띄우기
                $(this)
                    .siblings(".msg")
                    .text("휴대폰번호가 올바르지 않습니다.");

                // 불통과!
                pass = false;
            } ///////// if : 불통과시 //////////
            else {
                // 검사결과가 통과시 /////
                // 메시지 지우기
                $(this).siblings(".msg").empty();
            } ////////// else : 통과시 ///////////


        } //////////// else if : 휴대폰 검사 ////////////////
        else {
            // 메지시 지우기
            $(this).siblings(".msg").empty();
            // empty() 내용지우기 메서드
        } /////// else : 통과시 /////////////

    }); ////////////////// blur ///////////////////

    /*********************************************************** 
        가입하기(submit) 버튼 클릭시 처리하기
        ___________________________________

        전체검사의 원리:
        전역변수 pass를 설정하여 true를 할당하고 
        검사 중간에 불통과 사유발생 시 false로 변경!
        유효성 검사 통과여부를 판단한다!

        검사방법: 
        기존 이벤트 blur 이벤트를 강제로 발생시킨다!
        이벤트 강제발생 메서드는? -> trigger(이벤트명)
    ***********************************************************/
    // 검사용 변수
    let pass;

    // 이벤트 대상: 서브밋 버튼 -> #btnj
    // 원래 서브밋 버튼은 클릭 시 싸고 있는 form태그의
    // action속성에 지정되어 있는 페이지로 현재 페이지의
    // imput요소들의 값을 가지고 이동하게 되어 있다!
    // 여기서는 버튼 클릭시 통과 여부 체크를 위해
    // 이것을 막는다!
    $("#btnj").click(e => {
        // 0. 호출확인
        console.log("가입해");

        // 1. 기본이동막기
        e.preventDefault();

        // 2. pass 통과여부 변수에 true를 할당!
        // 처음에 true로 시작하여 검사 중간에 한번이라도
        // false로 할당되면 결과는 false다!
        pass = true;

        // 3. 입력창 blur 이벤트 강제발생시키기!
        // 대상: 블러 이벤트를 발생했던 요소들!
        $(`input[type=text][class!=sh][class!=msh],
            input[type=password]`).trigger("blur");

        // 최종 통과 여부
        console.log("통과여부: ", pass);

        // 4. 검사결과에 따라 메시지 보이기
        if (pass) { // 통과시 
            // 메시지 띄우기
            alert("회원가입이 정상적으로 처리되었습니다.")
            // 원래는 post방식으로 DB에 회원정보를 입력 후
            // DB에 입력완료 시 위의 메시지를 띄워준다!
        } // if
        else { // 불통과시
            alert("입력을 수정하세요!");
        }
    }); // click

    // 남 | 여 클릭
    const male = $("#male");
    const female = $("#female");

    male.click(e => {
        $(".female").removeClass("on");
        $(".male").addClass("on");
    }); // click

    female.click(e => {
        $(".male").removeClass("on");
        $(".female").addClass("on");
    }); // click

    $(".user_gender a").click(e => {
        // 1. 기본이동막기
        e.preventDefault();
    });

    // 안내창 
    const icwar = $(".icwar");
    const ictxt = $(".ictxt");
    const none = $(".none");

    icwar.click(() => ictxt.fadeIn(300));

    none.click(() => ictxt.fadeOut(300));


}); //JQB

/*////////////////////////////////////////////////////////
    함수명: vReg (validation with Regular Expression)
    기능: 값에 맞는 형식을 검사하여 리턴함
    (주의: 정규식을 따옴표로 싸지말아라!-싸면문자가됨!)
*/ ////////////////////////////////////////////////////////
function vReg(val, cid) {
    // val - 검사할값, cid - 처리구분아이디
    // //console.log("검사:"+val+"/"+cid);

    // 정규식 변수
    let reg;

    // 검사할 아이디에 따라 정규식을 변경함
    switch (cid) {
        case "idtxt": // 아이디
            // 영문자로 시작하는 6~20글자 영문자/숫자
            // reg = /^[a-z]{1}[a-z0-9]{5,19}$/g;

            reg = /^[a-zA-Z0-9]{4,13}$/g;
            // 영문(대소문자 구분 없음), 숫자로 4~13자리만 입력 가능합니다.

            // /^[a-z]{1} 첫글자는 영문자로 체크!
            // [a-z0-9]{5,19} 첫글자 다음 문자는 영문 또는 숫자로
            // 최소 5글자에서 최대 19글자를 유효범위로 체크!
            // 첫글자 한글자를 더하면 최소 6글자에서 최대 20글자체크!
            break;

        case "pwtxt": // 비밀번호
            // 특수문자,문자,숫자포함 형태의 5~15자리
            // reg = /^.*(?=^.{5,15}$)(?=.*\d)(?=.*[a-zA-Z])(?=.*[!@#$%^&+=]).*$/;
            reg = /^.*(?=^.{10,20}$)(?=.*\d)(?=.*[a-zA-Z0-9!@#$%^&+=]).*$/;

            // 영문, 숫자 혼합하여 10~20자리 이내로 입력하세요.

            // (?=^.{5,15}$) 시작부터 끝까지 전체 5~15자릿수 체크!
            // (?=.*\d) 숫자 사용체크!
            // (?=.*[a-zA-Z]) 영문자 대문자 또는 소문자 사용체크!
            // (?=.*[!@#$%^&+=]) 특수문자 사용체크!
            break;

        case "ph":
            reg = /^(01[016789]{1}|02|0[3-9]{1}[0-9]{1})-?([0-9]{3,4})-?([0-9]{4})$/, "$1-$2-$3";
    } //////////// switch case문 //////////////////

    // //console.log("정규식:"+reg);

    // 정규식 검사를 위한 JS메서드
    // -> 정규식.test(검사할값) : 결과 true/false
    return reg.test(val); //호출한 곳으로 검사결과리턴!
} //////////// vReg 함수 //////////////////////////////////